{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/lib/actions/general.action.ts"],"sourcesContent":["\"use server\";\n\nimport { generateObject } from \"ai\";\nimport { google } from \"@ai-sdk/google\";\n\nimport { db } from \"@/firebase/admin\";\nimport { feedbackSchema } from \"@/constants\";\n\nexport async function createFeedback(params: CreateFeedbackParams) {\n  const { interviewId, userId, transcript, feedbackId } = params;\n\n  try {\n    const formattedTranscript = transcript\n      .map(\n        (sentence: { role: string; content: string }) =>\n          `- ${sentence.role}: ${sentence.content}\\n`\n      )\n      .join(\"\");\n\n    const { object } = await generateObject({\n      model: google(\"gemini-2.0-flash-001\", {\n        structuredOutputs: false,\n      }),\n      schema: feedbackSchema,\n      prompt: `\n        You are an AI interviewer analyzing a mock interview. Your task is to evaluate the candidate based on structured categories. Be thorough and detailed in your analysis. Don't be lenient with the candidate. If there are mistakes or areas for improvement, point them out.\n        Transcript:\n        ${formattedTranscript}\n\n        Please score the candidate from 0 to 100 in the following areas. Do not add categories other than the ones provided:\n        - **Communication Skills**: Clarity, articulation, structured responses.\n        - **Technical Knowledge**: Understanding of key concepts for the role.\n        - **Problem-Solving**: Ability to analyze problems and propose solutions.\n        - **Cultural & Role Fit**: Alignment with company values and job role.\n        - **Confidence & Clarity**: Confidence in responses, engagement, and clarity.\n        `,\n      system:\n        \"You are a professional interviewer analyzing a mock interview. Your task is to evaluate the candidate based on structured categories\",\n    });\n\n    const feedback = {\n      interviewId: interviewId,\n      userId: userId,\n      totalScore: object.totalScore,\n      categoryScores: object.categoryScores,\n      strengths: object.strengths,\n      areasForImprovement: object.areasForImprovement,\n      finalAssessment: object.finalAssessment,\n      createdAt: new Date().toISOString(),\n    };\n\n    let feedbackRef;\n\n    if (feedbackId) {\n      feedbackRef = db.collection(\"feedback\").doc(feedbackId);\n    } else {\n      feedbackRef = db.collection(\"feedback\").doc();\n    }\n\n    await feedbackRef.set(feedback);\n\n    return { success: true, feedbackId: feedbackRef.id };\n  } catch (error) {\n    console.error(\"Error saving feedback:\", error);\n    return { success: false };\n  }\n}\n\nexport async function getInterviewById(id: string): Promise<Interview | null> {\n  const interview = await db.collection(\"interviews\").doc(id).get();\n\n  return interview.data() as Interview | null;\n}\n\nexport async function getFeedbackByInterviewId(\n  params: GetFeedbackByInterviewIdParams\n): Promise<Feedback | null> {\n  const { interviewId, userId } = params;\n\n  const querySnapshot = await db\n    .collection(\"feedback\")\n    .where(\"interviewId\", \"==\", interviewId)\n    .where(\"userId\", \"==\", userId)\n    .limit(1)\n    .get();\n\n  if (querySnapshot.empty) return null;\n\n  const feedbackDoc = querySnapshot.docs[0];\n  return { id: feedbackDoc.id, ...feedbackDoc.data() } as Feedback;\n}\n\nexport async function getLatestInterviews(\n  params: GetLatestInterviewsParams\n): Promise<Interview[] | null> {\n  const { userId, limit = 20 } = params;\n\n  const interviews = await db\n    .collection(\"interviews\")\n    .orderBy(\"createdAt\", \"desc\")\n    .where(\"finalized\", \"==\", true)\n    .where(\"userId\", \"!=\", userId)\n    .limit(limit)\n    .get();\n\n  return interviews.docs.map((doc) => ({\n    id: doc.id,\n    ...doc.data(),\n  })) as Interview[];\n}\n\nexport async function getInterviewsByUserId(\n  userId: string\n): Promise<Interview[] | null> {\n  const interviews = await db\n    .collection(\"interviews\")\n    .where(\"userId\", \"==\", userId)\n    .orderBy(\"createdAt\", \"desc\")\n    .get();\n\n  return interviews.docs.map((doc) => ({\n    id: doc.id,\n    ...doc.data(),\n  })) as Interview[];\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/.next-internal/server/app/%28root%29/allinterviews/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {signOut as '00793394b277d19552014378f1dc846c09cbfb2b57'} from 'ACTIONS_MODULE0'\nexport {isAuthenticated as '00a01d09c19859b55ae7ac996eee01b56c67a3c0a2'} from 'ACTIONS_MODULE0'\nexport {logout as '00b931587180d522de8c7c728e98901163fe528047'} from 'ACTIONS_MODULE0'\nexport {getCurrentUser as '00d5d013267b10086c3f61e76203aad2abc9e1bfaa'} from 'ACTIONS_MODULE0'\nexport {signIn as '4016cb4fb2494378f5ff0a0e5882c62c19a902d083'} from 'ACTIONS_MODULE0'\nexport {setSessionCookie as '4085e29fdf6b5b5276675b3979afc28fc980338cfb'} from 'ACTIONS_MODULE0'\nexport {signUp as '40da36582b074e7ac0a194925866a6a4ceb629df82'} from 'ACTIONS_MODULE0'\nexport {getFeedbackByInterviewId as '403be43bd0c53e40cf4761f885de6f80353a610284'} from 'ACTIONS_MODULE1'\nexport {createFeedback as '405ae410f7a02e1064647acfacc8397287216366d0'} from 'ACTIONS_MODULE1'\nexport {getLatestInterviews as '40615731fb3a565bd1d98fb28e67858d0e384d6add'} from 'ACTIONS_MODULE1'\nexport {getInterviewsByUserId as '40706ff48b44b892b2ef558cc4d4066f7b707648b0'} from 'ACTIONS_MODULE1'\nexport {getInterviewById as '40ec5fdd60422bd5f3fab3af141f575ca511792615'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AAOA","debugId":null}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/firebase/client.ts"],"sourcesContent":["\r\nimport { getApp, getApps, initializeApp } from \"firebase/app\";\r\n\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\r\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\r\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\r\n  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\r\n\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\n"],"names":[],"mappings":";;;;AACA;AAAA;AAEA;AAAA;AACA;AAAA;;;;AAEA,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;IACL,aAAa;AACf;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,GAAG,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE,kBAAkB,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;AAE9D,MAAM,OAAO,CAAA,GAAA,6MAAA,CAAA,UAAO,AAAD,EAAE;AACrB,MAAM,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/components/DisplayTechIcons.tsx"],"sourcesContent":["import Image from \"next/image\";\r\n\r\nimport { cn, getTechLogos } from \"@/lib/utils\";\r\n\r\nconst DisplayTechIcons = async ({ techStack }: TechIconProps) => {\r\n  const techIcons = await getTechLogos(techStack);\r\n\r\n  return (\r\n    <div className=\"flex flex-row\">\r\n      {techIcons.slice(0, 3).map(({ tech, url }, index) => (\r\n        <div\r\n          key={tech}\r\n          className={cn(\r\n            \"relative group bg-dark-300 rounded-full p-2 flex flex-center\",\r\n            index >= 1 && \"-ml-3\"\r\n          )}\r\n        >\r\n          <span className=\"tech-tooltip\">{tech}</span>\r\n\r\n          <Image\r\n            src={url}\r\n            alt={tech}\r\n            width={100}\r\n            height={100}\r\n            className=\"size-5\"\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayTechIcons;\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,mBAAmB,OAAO,EAAE,SAAS,EAAiB;IAC1D,MAAM,YAAY,MAAM,CAAA,GAAA,4GAAA,CAAA,eAAY,AAAD,EAAE;IAErC,qBACE,8OAAC;QAAI,WAAU;kBACZ,UAAU,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,sBACzC,8OAAC;gBAEC,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,gEACA,SAAS,KAAK;;kCAGhB,8OAAC;wBAAK,WAAU;kCAAgB;;;;;;kCAEhC,8OAAC,6HAAA,CAAA,UAAK;wBACJ,KAAK;wBACL,KAAK;wBACL,OAAO;wBACP,QAAQ;wBACR,WAAU;;;;;;;eAbP;;;;;;;;;;AAmBf;uCAEe","debugId":null}},
    {"offset": {"line": 441, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/components/InterviewCard.tsx"],"sourcesContent":["import dayjs from \"dayjs\";\r\nimport Link from \"next/link\";\r\nimport Image from \"next/image\";\r\n\r\nimport { Button } from \"./ui/button\";\r\nimport DisplayTechIcons from \"./DisplayTechIcons\";\r\n\r\nimport { cn, getRandomInterviewCover } from \"@/lib/utils\";\r\nimport { getFeedbackByInterviewId } from \"@/lib/actions/general.action\";\r\n\r\nconst InterviewCard = async ({\r\n  interviewId,\r\n  userId,\r\n  role,\r\n  type,\r\n  techstack,\r\n  createdAt,\r\n}: InterviewCardProps) => {\r\n  const feedback =\r\n    userId && interviewId\r\n      ? await getFeedbackByInterviewId({\r\n          interviewId,\r\n          userId,\r\n        })\r\n      : null;\r\n\r\n  const normalizedType = /mix/gi.test(type) ? \"Mixed\" : type;\r\n\r\n  const badgeColor = {\r\n    Behavioral: \"bg-green-700 text-green-200\",\r\n    Mixed: \"bg-yellow-700 text-yellow-200\",\r\n    Technical: \"bg-blue-700 text-blue-200\",\r\n  }[normalizedType] || \"bg-gray-700 text-gray-200\";\r\n\r\n  const formattedDate = dayjs(\r\n    feedback?.createdAt || createdAt || Date.now()\r\n  ).format(\"MMM D, YYYY\");\r\n\r\n  return (\r\n    <div className=\"w-[360px] max-sm:w-full min-h-96 rounded-xl border border-gray-700 bg-[#0a0a0a] text-gray-200 shadow-md hover:shadow-xl hover:scale-[1.02] transition-all duration-300 overflow-hidden\">\r\n      <div className=\"p-5 flex flex-col justify-between h-full gap-5 relative\">\r\n\r\n        {/* Type Badge */}\r\n        <div\r\n          className={cn(\r\n            \"absolute top-3 right-3 px-3 py-1 rounded-full text-xs font-medium shadow-sm\",\r\n            badgeColor\r\n          )}\r\n        >\r\n          {normalizedType}\r\n        </div>\r\n\r\n        {/* Cover Image */}\r\n        <div className=\"flex justify-center\">\r\n          <Image\r\n            src={getRandomInterviewCover()}\r\n            alt=\"cover-image\"\r\n            width={90}\r\n            height={90}\r\n            className=\"rounded-full object-cover border border-gray-600\"\r\n          />\r\n        </div>\r\n\r\n        {/* Interview Role */}\r\n        <h3 className=\"text-center mt-2 text-lg font-semibold capitalize\">\r\n          {role} Interview\r\n        </h3>\r\n\r\n        {/* Date & Score */}\r\n        <div className=\"flex flex-row justify-center gap-6 text-sm text-gray-400\">\r\n          <div className=\"flex items-center gap-1\">\r\n            <Image src=\"/calendar.svg\" width={20} height={20} alt=\"calendar\" />\r\n            <span>{formattedDate}</span>\r\n          </div>\r\n          <div className=\"flex items-center gap-1\">\r\n            <Image src=\"/star.svg\" width={20} height={20} alt=\"star\" />\r\n            <span>{feedback?.totalScore || \"---\"}/100</span>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Feedback or Placeholder Text */}\r\n        <p className=\"text-center text-gray-400 text-sm line-clamp-2\">\r\n          {feedback?.finalAssessment ||\r\n            \"You haven't taken this interview yet. Take it now to improve your skills.\"}\r\n        </p>\r\n\r\n        {/* Tech icons and Button */}\r\n        <div className=\"flex justify-between items-center mt-4\">\r\n          <DisplayTechIcons techStack={techstack} />\r\n\r\n          <Button className=\"bg-blue-600 text-white hover:bg-blue-500 transition-all\">\r\n            <Link\r\n              href={\r\n                feedback\r\n                  ? `/interview/${interviewId}/feedback`\r\n                  : `/interview/${interviewId}`\r\n              }\r\n            >\r\n              {feedback ? \"Check Feedback\" : \"View Interview\"}\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InterviewCard;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;AAEA,MAAM,gBAAgB,OAAO,EAC3B,WAAW,EACX,MAAM,EACN,IAAI,EACJ,IAAI,EACJ,SAAS,EACT,SAAS,EACU;IACnB,MAAM,WACJ,UAAU,cACN,MAAM,CAAA,GAAA,mIAAA,CAAA,2BAAwB,AAAD,EAAE;QAC7B;QACA;IACF,KACA;IAEN,MAAM,iBAAiB,QAAQ,IAAI,CAAC,QAAQ,UAAU;IAEtD,MAAM,aAAa;QACjB,YAAY;QACZ,OAAO;QACP,WAAW;IACb,CAAC,CAAC,eAAe,IAAI;IAErB,MAAM,gBAAgB,CAAA,GAAA,qIAAA,CAAA,UAAK,AAAD,EACxB,UAAU,aAAa,aAAa,KAAK,GAAG,IAC5C,MAAM,CAAC;IAET,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BAGb,8OAAC;oBACC,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,+EACA;8BAGD;;;;;;8BAIH,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC,6HAAA,CAAA,UAAK;wBACJ,KAAK,CAAA,GAAA,4GAAA,CAAA,0BAAuB,AAAD;wBAC3B,KAAI;wBACJ,OAAO;wBACP,QAAQ;wBACR,WAAU;;;;;;;;;;;8BAKd,8OAAC;oBAAG,WAAU;;wBACX;wBAAK;;;;;;;8BAIR,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,6HAAA,CAAA,UAAK;oCAAC,KAAI;oCAAgB,OAAO;oCAAI,QAAQ;oCAAI,KAAI;;;;;;8CACtD,8OAAC;8CAAM;;;;;;;;;;;;sCAET,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,6HAAA,CAAA,UAAK;oCAAC,KAAI;oCAAY,OAAO;oCAAI,QAAQ;oCAAI,KAAI;;;;;;8CAClD,8OAAC;;wCAAM,UAAU,cAAc;wCAAM;;;;;;;;;;;;;;;;;;;8BAKzC,8OAAC;oBAAE,WAAU;8BACV,UAAU,mBACT;;;;;;8BAIJ,8OAAC;oBAAI,WAAU;;sCACb,8OAAC,+HAAA,CAAA,UAAgB;4BAAC,WAAW;;;;;;sCAE7B,8OAAC,2HAAA,CAAA,SAAM;4BAAC,WAAU;sCAChB,cAAA,8OAAC,4JAAA,CAAA,UAAI;gCACH,MACE,WACI,CAAC,WAAW,EAAE,YAAY,SAAS,CAAC,GACpC,CAAC,WAAW,EAAE,aAAa;0CAGhC,WAAW,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAO7C;uCAEe","debugId":null}},
    {"offset": {"line": 641, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/components/InterviewFilter.tsx"],"sourcesContent":["interface InterviewFilterProps {\r\n    selected: string;\r\n    onChange: (value: string) => void;\r\n    options: string[]; // Ensure this is expecting an array of strings\r\n  }\r\n  \r\n  export const InterviewFilter = ({ selected, onChange, options }: InterviewFilterProps) => {\r\n    return (\r\n      <div>\r\n        <label htmlFor=\"interview-filter\">Filter Options</label>\r\n        <select\r\n          id=\"interview-filter\"\r\n          value={selected}\r\n          onChange={(e) => onChange(e.target.value)}\r\n        >\r\n          {options.map((option) => (\r\n            <option key={option} value={option}>\r\n              {option}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    );\r\n  };\r\n  "],"names":[],"mappings":";;;;;AAMS,MAAM,kBAAkB,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAwB;IACnF,qBACE,8OAAC;;0BACC,8OAAC;gBAAM,SAAQ;0BAAmB;;;;;;0BAClC,8OAAC;gBACC,IAAG;gBACH,OAAO;gBACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;0BAEvC,QAAQ,GAAG,CAAC,CAAC,uBACZ,8OAAC;wBAAoB,OAAO;kCACzB;uBADU;;;;;;;;;;;;;;;;AAOvB","debugId":null}},
    {"offset": {"line": 687, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/app/%28root%29/allinterviews/page.tsx"],"sourcesContent":["// \"use client\";  // Add this line at the top to mark this file as a client component\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { db } from \"@/firebase/client\";\r\nimport { collection, getDocs } from \"firebase/firestore\";\r\nimport InterviewCard from \"@/components/InterviewCard\";\r\nimport { InterviewFilter } from \"@/components/InterviewFilter\"; // Assuming this is your filter component\r\n\r\ninterface InterviewData {\r\n  id: string;\r\n  role: string;\r\n  type: string;\r\n  level: string;\r\n  techstack: string[];\r\n  coverImage: string;\r\n}\r\n\r\nconst AllInterviews = () => {\r\n  const [interviews, setInterviews] = useState<InterviewData[]>([]);\r\n  const [filter, setFilter] = useState(\"All\");\r\n  const [uniqueTypes, setUniqueTypes] = useState<string[]>([]);\r\n  const [uniqueTechStacks, setUniqueTechStacks] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    const fetchInterviews = async () => {\r\n      const snapshot = await getDocs(collection(db, \"interviews\"));\r\n      const data = snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      })) as InterviewData[];\r\n\r\n      setInterviews(data);\r\n      // Extract unique filter options\r\n      const types = [...new Set(data.map((i) => i.type))];\r\n      const techStacks = [\r\n        ...new Set(data.flatMap((i) => i.techstack)),\r\n      ];\r\n\r\n      setUniqueTypes([\"All\", ...types]);\r\n      setUniqueTechStacks([\"All\", ...techStacks]);\r\n    };\r\n\r\n    fetchInterviews();\r\n  }, []);\r\n\r\n  // Filter interviews by type and tech stack\r\n  const filteredInterviews = interviews.filter((interview) => {\r\n    const typeMatch = filter === \"All\" || interview.type === filter;\r\n    const techStackMatch = filter === \"All\" || interview.techstack.includes(filter);\r\n    return typeMatch && techStackMatch;\r\n  });\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto px-4\">\r\n      <h1 className=\"text-3xl font-bold text-center mb-6\">All Interviews</h1>\r\n\r\n      {/* Filters */}\r\n      <InterviewFilter\r\n        selected={filter}\r\n        onChange={setFilter}\r\n        options={uniqueTypes}  \r\n      />\r\n\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        {filteredInterviews.map((interview) => (\r\n          <InterviewCard key={interview.id} {...interview} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllInterviews;\r\n"],"names":[],"mappings":"AAAA,qFAAqF;;;;;AAErF;AACA;AACA;AAAA;AACA;AACA,iOAAgE,yCAAyC;;;;;;;;;;;AAWzG,MAAM,gBAAgB;IACpB,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAmB,EAAE;IAChE,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAC3D,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAErE,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,kBAAkB;YACtB,MAAM,WAAW,MAAM,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,kHAAA,CAAA,KAAE,EAAE;YAC9C,MAAM,OAAO,SAAS,IAAI,CAAC,GAAG,CAAC,CAAC,MAAQ,CAAC;oBACvC,IAAI,IAAI,EAAE;oBACV,GAAG,IAAI,IAAI,EAAE;gBACf,CAAC;YAED,cAAc;YACd,gCAAgC;YAChC,MAAM,QAAQ;mBAAI,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI;aAAG;YACnD,MAAM,aAAa;mBACd,IAAI,IAAI,KAAK,OAAO,CAAC,CAAC,IAAM,EAAE,SAAS;aAC3C;YAED,eAAe;gBAAC;mBAAU;aAAM;YAChC,oBAAoB;gBAAC;mBAAU;aAAW;QAC5C;QAEA;IACF,GAAG,EAAE;IAEL,2CAA2C;IAC3C,MAAM,qBAAqB,WAAW,MAAM,CAAC,CAAC;QAC5C,MAAM,YAAY,WAAW,SAAS,UAAU,IAAI,KAAK;QACzD,MAAM,iBAAiB,WAAW,SAAS,UAAU,SAAS,CAAC,QAAQ,CAAC;QACxE,OAAO,aAAa;IACtB;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAAsC;;;;;;0BAGpD,8OAAC,8HAAA,CAAA,kBAAe;gBACd,UAAU;gBACV,UAAU;gBACV,SAAS;;;;;;0BAGX,8OAAC;gBAAI,WAAU;0BACZ,mBAAmB,GAAG,CAAC,CAAC,0BACvB,8OAAC,4HAAA,CAAA,UAAa;wBAAqB,GAAG,SAAS;uBAA3B,UAAU,EAAE;;;;;;;;;;;;;;;;AAK1C;uCAEe","debugId":null}}]
}