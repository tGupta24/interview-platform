{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/node_modules/next/src/shared/lib/image-external.tsx"],"sourcesContent":["import type { ImageConfigComplete, ImageLoaderProps } from './image-config'\nimport type { ImageProps, ImageLoader, StaticImageData } from './get-img-props'\n\nimport { getImgProps } from './get-img-props'\nimport { Image } from '../../client/image-component'\n\n// @ts-ignore - This is replaced by webpack alias\nimport defaultLoader from 'next/dist/shared/lib/image-loader'\n\n/**\n * For more advanced use cases, you can call `getImageProps()`\n * to get the props that would be passed to the underlying `<img>` element,\n * and instead pass to them to another component, style, canvas, etc.\n *\n * Read more: [Next.js docs: `getImageProps`](https://nextjs.org/docs/app/api-reference/components/image#getimageprops)\n */\nexport function getImageProps(imgProps: ImageProps) {\n  const { props } = getImgProps(imgProps, {\n    defaultLoader,\n    // This is replaced by webpack define plugin\n    imgConf: process.env.__NEXT_IMAGE_OPTS as any as ImageConfigComplete,\n  })\n  // Normally we don't care about undefined props because we pass to JSX,\n  // but this exported function could be used by the end user for anything\n  // so we delete undefined props to clean it up a little.\n  for (const [key, value] of Object.entries(props)) {\n    if (value === undefined) {\n      delete props[key as keyof typeof props]\n    }\n  }\n  return { props }\n}\n\nexport default Image\n\nexport type { ImageProps, ImageLoaderProps, ImageLoader, StaticImageData }\n"],"names":["getImageProps","imgProps","props","getImgProps","defaultLoader","imgConf","process","env","__NEXT_IMAGE_OPTS","key","value","Object","entries","undefined","Image"],"mappings":";;;;;;;;;;;;;;;IAiCA,OAAoB,EAAA;eAApB;;IAjBgBA,aAAa,EAAA;eAAbA;;;;6BAbY;gCACN;sEAGI;AASnB,SAASA,cAAcC,QAAoB;IAChD,MAAM,EAAEC,KAAK,EAAE,GAAGC,CAAAA,GAAAA,aAAAA,WAAW,EAACF,UAAU;QACtCG,eAAAA,aAAAA,OAAa;QACb,4CAA4C;QAC5CC,OAAAA,EAASC,QAAQC,GAAG,CAACC,iBAAiB;IACxC;IACA,uEAAuE;IACvE,wEAAwE;IACxE,wDAAwD;IACxD,KAAK,MAAM,CAACC,KAAKC,MAAM,IAAIC,OAAOC,OAAO,CAACV,OAAQ;QAChD,IAAIQ,UAAUG,WAAW;YACvB,OAAOX,KAAK,CAACO,IAA0B;QACzC;IACF;IACA,OAAO;QAAEP;IAAM;AACjB;MAEA,WAAeY,gBAAAA,KAAK","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/node_modules/next/image.js"],"sourcesContent":["module.exports = require('./dist/shared/lib/image-external')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/node_modules/%40vapi-ai/web/dist/api.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Api = exports.HttpClient = exports.ContentType = void 0;\nvar ContentType;\n(function (ContentType) {\n    ContentType[\"Json\"] = \"application/json\";\n    ContentType[\"FormData\"] = \"multipart/form-data\";\n    ContentType[\"UrlEncoded\"] = \"application/x-www-form-urlencoded\";\n    ContentType[\"Text\"] = \"text/plain\";\n})(ContentType || (exports.ContentType = ContentType = {}));\nclass HttpClient {\n    baseUrl = 'https://api.vapi.ai';\n    securityData = null;\n    securityWorker;\n    abortControllers = new Map();\n    customFetch = (...fetchParams) => fetch(...fetchParams);\n    baseApiParams = {\n        credentials: 'same-origin',\n        headers: {},\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n    };\n    constructor(apiConfig = {}) {\n        Object.assign(this, apiConfig);\n    }\n    setSecurityData = (data) => {\n        this.securityData = data;\n    };\n    encodeQueryParam(key, value) {\n        const encodedKey = encodeURIComponent(key);\n        return `${encodedKey}=${encodeURIComponent(typeof value === 'number' ? value : `${value}`)}`;\n    }\n    addQueryParam(query, key) {\n        return this.encodeQueryParam(key, query[key]);\n    }\n    addArrayQueryParam(query, key) {\n        const value = query[key];\n        return value.map((v) => this.encodeQueryParam(key, v)).join('&');\n    }\n    toQueryString(rawQuery) {\n        const query = rawQuery || {};\n        const keys = Object.keys(query).filter((key) => 'undefined' !== typeof query[key]);\n        return keys\n            .map((key) => Array.isArray(query[key])\n            ? this.addArrayQueryParam(query, key)\n            : this.addQueryParam(query, key))\n            .join('&');\n    }\n    addQueryParams(rawQuery) {\n        const queryString = this.toQueryString(rawQuery);\n        return queryString ? `?${queryString}` : '';\n    }\n    contentFormatters = {\n        [ContentType.Json]: (input) => input !== null && (typeof input === 'object' || typeof input === 'string')\n            ? JSON.stringify(input)\n            : input,\n        [ContentType.Text]: (input) => input !== null && typeof input !== 'string' ? JSON.stringify(input) : input,\n        [ContentType.FormData]: (input) => Object.keys(input || {}).reduce((formData, key) => {\n            const property = input[key];\n            formData.append(key, property instanceof Blob\n                ? property\n                : typeof property === 'object' && property !== null\n                    ? JSON.stringify(property)\n                    : `${property}`);\n            return formData;\n        }, new FormData()),\n        [ContentType.UrlEncoded]: (input) => this.toQueryString(input),\n    };\n    mergeRequestParams(params1, params2) {\n        return {\n            ...this.baseApiParams,\n            ...params1,\n            ...(params2 || {}),\n            headers: {\n                ...(this.baseApiParams.headers || {}),\n                ...(params1.headers || {}),\n                ...((params2 && params2.headers) || {}),\n            },\n        };\n    }\n    createAbortSignal = (cancelToken) => {\n        if (this.abortControllers.has(cancelToken)) {\n            const abortController = this.abortControllers.get(cancelToken);\n            if (abortController) {\n                return abortController.signal;\n            }\n            return void 0;\n        }\n        const abortController = new AbortController();\n        this.abortControllers.set(cancelToken, abortController);\n        return abortController.signal;\n    };\n    abortRequest = (cancelToken) => {\n        const abortController = this.abortControllers.get(cancelToken);\n        if (abortController) {\n            abortController.abort();\n            this.abortControllers.delete(cancelToken);\n        }\n    };\n    request = async ({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }) => {\n        const secureParams = ((typeof secure === 'boolean' ? secure : this.baseApiParams.secure) &&\n            this.securityWorker &&\n            (await this.securityWorker(this.securityData))) ||\n            {};\n        const requestParams = this.mergeRequestParams(params, secureParams);\n        const queryString = query && this.toQueryString(query);\n        const payloadFormatter = this.contentFormatters[type || ContentType.Json];\n        const responseFormat = format || requestParams.format;\n        return this.customFetch(`${baseUrl || this.baseUrl || ''}${path}${queryString ? `?${queryString}` : ''}`, {\n            ...requestParams,\n            headers: {\n                ...(requestParams.headers || {}),\n                ...(type && type !== ContentType.FormData ? { 'Content-Type': type } : {}),\n            },\n            signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,\n            body: typeof body === 'undefined' || body === null ? null : payloadFormatter(body),\n        }).then(async (response) => {\n            const r = response;\n            r.data = null;\n            r.error = null;\n            const data = !responseFormat\n                ? r\n                : await response[responseFormat]()\n                    .then((data) => {\n                    if (r.ok) {\n                        r.data = data;\n                    }\n                    else {\n                        r.error = data;\n                    }\n                    return r;\n                })\n                    .catch((e) => {\n                    r.error = e;\n                    return r;\n                });\n            if (cancelToken) {\n                this.abortControllers.delete(cancelToken);\n            }\n            if (!response.ok)\n                throw data;\n            return data;\n        });\n    };\n}\nexports.HttpClient = HttpClient;\n/**\n * @title Vapi API\n * @version 1.0\n * @baseUrl https://api.vapi.ai\n * @contact\n *\n * Voice AI for developers.\n */\nclass Api extends HttpClient {\n    call = {\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerCreate\n         * @summary Create Call\n         * @request POST:/call\n         * @secure\n         */\n        callControllerCreate: (data, params = {}) => this.request({\n            path: `/call`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerFindAll\n         * @summary List Calls\n         * @request GET:/call\n         * @secure\n         */\n        callControllerFindAll: (query, params = {}) => this.request({\n            path: `/call`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerFindOne\n         * @summary Get Call\n         * @request GET:/call/{id}\n         * @secure\n         */\n        callControllerFindOne: (id, params = {}) => this.request({\n            path: `/call/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerUpdate\n         * @summary Update Call\n         * @request PATCH:/call/{id}\n         * @secure\n         */\n        callControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/call/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerDeleteCallData\n         * @summary Delete Call Data\n         * @request DELETE:/call/{id}\n         * @secure\n         */\n        callControllerDeleteCallData: (id, params = {}) => this.request({\n            path: `/call/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerCreatePhoneCall\n         * @summary Create Phone Call\n         * @request POST:/call/phone\n         * @deprecated\n         * @secure\n         */\n        callControllerCreatePhoneCall: (data, params = {}) => this.request({\n            path: `/call/phone`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerCreateWebCall\n         * @summary Create Web Call\n         * @request POST:/call/web\n         * @secure\n         */\n        callControllerCreateWebCall: (data, params = {}) => this.request({\n            path: `/call/web`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n    };\n    v2 = {\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerFindAllPaginated\n         * @summary List Calls\n         * @request GET:/v2/call\n         * @secure\n         */\n        callControllerFindAllPaginated: (query, params = {}) => this.request({\n            path: `/v2/call`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerFindAllMetadataPaginated\n         * @summary List Call Metadata\n         * @request GET:/v2/call/metadata\n         * @secure\n         */\n        callControllerFindAllMetadataPaginated: (query, params = {}) => this.request({\n            path: `/v2/call/metadata`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerFindAllPaginated\n         * @summary List Assistants with pagination\n         * @request GET:/v2/assistant\n         * @secure\n         */\n        assistantControllerFindAllPaginated: (query, params = {}) => this.request({\n            path: `/v2/assistant`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerFindAllPaginated\n         * @summary List Phone Numbers\n         * @request GET:/v2/phone-number\n         * @secure\n         */\n        phoneNumberControllerFindAllPaginated: (query, params = {}) => this.request({\n            path: `/v2/phone-number`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    chat = {\n        /**\n         * No description\n         *\n         * @tags Chat\n         * @name ChatController\n         * @summary Chat with Assistant\n         * @request POST:/chat\n         * @deprecated\n         * @secure\n         */\n        chatController: (params = {}) => this.request({\n            path: `/chat`,\n            method: 'POST',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Chat\n         * @name ChatControllerChatCompletions\n         * @summary Chat with a Workflow\n         * @request POST:/chat/completions\n         * @secure\n         */\n        chatControllerChatCompletions: (data, params = {}) => this.request({\n            path: `/chat/completions`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n    };\n    assistant = {\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerCreate\n         * @summary Create Assistant\n         * @request POST:/assistant\n         * @secure\n         */\n        assistantControllerCreate: (data, params = {}) => this.request({\n            path: `/assistant`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerFindAll\n         * @summary List Assistants\n         * @request GET:/assistant\n         * @secure\n         */\n        assistantControllerFindAll: (query, params = {}) => this.request({\n            path: `/assistant`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerFindOne\n         * @summary Get Assistant\n         * @request GET:/assistant/{id}\n         * @secure\n         */\n        assistantControllerFindOne: (id, params = {}) => this.request({\n            path: `/assistant/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerUpdate\n         * @summary Update Assistant\n         * @request PATCH:/assistant/{id}\n         * @secure\n         */\n        assistantControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/assistant/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerReplace\n         * @summary Replace Assistant\n         * @request PUT:/assistant/{id}\n         * @secure\n         */\n        assistantControllerReplace: (id, data, params = {}) => this.request({\n            path: `/assistant/${id}`,\n            method: 'PUT',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerRemove\n         * @summary Delete Assistant\n         * @request DELETE:/assistant/{id}\n         * @secure\n         */\n        assistantControllerRemove: (id, params = {}) => this.request({\n            path: `/assistant/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    phoneNumber = {\n        /**\n         * @description Use POST /phone-number instead.\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerImportTwilio\n         * @summary Import Twilio Number\n         * @request POST:/phone-number/import/twilio\n         * @deprecated\n         * @secure\n         */\n        phoneNumberControllerImportTwilio: (data, params = {}) => this.request({\n            path: `/phone-number/import/twilio`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * @description Use POST /phone-number instead.\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerImportVonage\n         * @summary Import Vonage Number\n         * @request POST:/phone-number/import/vonage\n         * @deprecated\n         * @secure\n         */\n        phoneNumberControllerImportVonage: (data, params = {}) => this.request({\n            path: `/phone-number/import/vonage`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerCreate\n         * @summary Create Phone Number\n         * @request POST:/phone-number\n         * @secure\n         */\n        phoneNumberControllerCreate: (data, params = {}) => this.request({\n            path: `/phone-number`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerFindAll\n         * @summary List Phone Numbers\n         * @request GET:/phone-number\n         * @secure\n         */\n        phoneNumberControllerFindAll: (query, params = {}) => this.request({\n            path: `/phone-number`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerFindOne\n         * @summary Get Phone Number\n         * @request GET:/phone-number/{id}\n         * @secure\n         */\n        phoneNumberControllerFindOne: (id, params = {}) => this.request({\n            path: `/phone-number/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerUpdate\n         * @summary Update Phone Number\n         * @request PATCH:/phone-number/{id}\n         * @secure\n         */\n        phoneNumberControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/phone-number/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerRemove\n         * @summary Delete Phone Number\n         * @request DELETE:/phone-number/{id}\n         * @secure\n         */\n        phoneNumberControllerRemove: (id, params = {}) => this.request({\n            path: `/phone-number/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    tool = {\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerCreate\n         * @summary Create Tool\n         * @request POST:/tool\n         * @secure\n         */\n        toolControllerCreate: (data, params = {}) => this.request({\n            path: `/tool`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerFindAll\n         * @summary List Tools\n         * @request GET:/tool\n         * @secure\n         */\n        toolControllerFindAll: (query, params = {}) => this.request({\n            path: `/tool`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerFindOne\n         * @summary Get Tool\n         * @request GET:/tool/{id}\n         * @secure\n         */\n        toolControllerFindOne: (id, params = {}) => this.request({\n            path: `/tool/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerUpdate\n         * @summary Update Tool\n         * @request PATCH:/tool/{id}\n         * @secure\n         */\n        toolControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/tool/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerRemove\n         * @summary Delete Tool\n         * @request DELETE:/tool/{id}\n         * @secure\n         */\n        toolControllerRemove: (id, params = {}) => this.request({\n            path: `/tool/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    file = {\n        /**\n         * @description Use POST /file instead.\n         *\n         * @tags Files\n         * @name FileControllerCreateDeprecated\n         * @summary Upload File\n         * @request POST:/file/upload\n         * @deprecated\n         * @secure\n         */\n        fileControllerCreateDeprecated: (data, params = {}) => this.request({\n            path: `/file/upload`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.FormData,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerCreate\n         * @summary Upload File\n         * @request POST:/file\n         * @secure\n         */\n        fileControllerCreate: (data, params = {}) => this.request({\n            path: `/file`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.FormData,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerFindAll\n         * @summary List Files\n         * @request GET:/file\n         * @secure\n         */\n        fileControllerFindAll: (params = {}) => this.request({\n            path: `/file`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerFindOne\n         * @summary Get File\n         * @request GET:/file/{id}\n         * @secure\n         */\n        fileControllerFindOne: (id, params = {}) => this.request({\n            path: `/file/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerUpdate\n         * @summary Update File\n         * @request PATCH:/file/{id}\n         * @secure\n         */\n        fileControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/file/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerRemove\n         * @summary Delete File\n         * @request DELETE:/file/{id}\n         * @secure\n         */\n        fileControllerRemove: (id, params = {}) => this.request({\n            path: `/file/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    knowledgeBase = {\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerCreate\n         * @summary Create Knowledge Base\n         * @request POST:/knowledge-base\n         * @secure\n         */\n        knowledgeBaseControllerCreate: (data, params = {}) => this.request({\n            path: `/knowledge-base`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerFindAll\n         * @summary List Knowledge Bases\n         * @request GET:/knowledge-base\n         * @secure\n         */\n        knowledgeBaseControllerFindAll: (query, params = {}) => this.request({\n            path: `/knowledge-base`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerFindOne\n         * @summary Get Knowledge Base\n         * @request GET:/knowledge-base/{id}\n         * @secure\n         */\n        knowledgeBaseControllerFindOne: (id, params = {}) => this.request({\n            path: `/knowledge-base/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerUpdate\n         * @summary Update Knowledge Base\n         * @request PATCH:/knowledge-base/{id}\n         * @secure\n         */\n        knowledgeBaseControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/knowledge-base/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerRemove\n         * @summary Delete Knowledge Base\n         * @request DELETE:/knowledge-base/{id}\n         * @secure\n         */\n        knowledgeBaseControllerRemove: (id, params = {}) => this.request({\n            path: `/knowledge-base/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    workflow = {\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerFindAll\n         * @summary Get Workflows\n         * @request GET:/workflow\n         * @secure\n         */\n        workflowControllerFindAll: (params = {}) => this.request({\n            path: `/workflow`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerCreate\n         * @summary Create Workflow\n         * @request POST:/workflow\n         * @secure\n         */\n        workflowControllerCreate: (data, params = {}) => this.request({\n            path: `/workflow`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerFindOne\n         * @summary Get Workflow\n         * @request GET:/workflow/{id}\n         * @secure\n         */\n        workflowControllerFindOne: (id, params = {}) => this.request({\n            path: `/workflow/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerDelete\n         * @summary Delete Workflow\n         * @request DELETE:/workflow/{id}\n         * @secure\n         */\n        workflowControllerDelete: (id, params = {}) => this.request({\n            path: `/workflow/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerUpdate\n         * @summary Update Workflow\n         * @request PATCH:/workflow/{id}\n         * @secure\n         */\n        workflowControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/workflow/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n    };\n    squad = {\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerCreate\n         * @summary Create Squad\n         * @request POST:/squad\n         * @secure\n         */\n        squadControllerCreate: (data, params = {}) => this.request({\n            path: `/squad`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerFindAll\n         * @summary List Squads\n         * @request GET:/squad\n         * @secure\n         */\n        squadControllerFindAll: (query, params = {}) => this.request({\n            path: `/squad`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerFindOne\n         * @summary Get Squad\n         * @request GET:/squad/{id}\n         * @secure\n         */\n        squadControllerFindOne: (id, params = {}) => this.request({\n            path: `/squad/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerUpdate\n         * @summary Update Squad\n         * @request PATCH:/squad/{id}\n         * @secure\n         */\n        squadControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/squad/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerRemove\n         * @summary Delete Squad\n         * @request DELETE:/squad/{id}\n         * @secure\n         */\n        squadControllerRemove: (id, params = {}) => this.request({\n            path: `/squad/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    testSuite = {\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerFindAllPaginated\n         * @summary List Test Suites\n         * @request GET:/test-suite\n         * @secure\n         */\n        testSuiteControllerFindAllPaginated: (query, params = {}) => this.request({\n            path: `/test-suite`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerCreate\n         * @summary Create Test Suite\n         * @request POST:/test-suite\n         * @secure\n         */\n        testSuiteControllerCreate: (data, params = {}) => this.request({\n            path: `/test-suite`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerFindOne\n         * @summary Get Test Suite\n         * @request GET:/test-suite/{id}\n         * @secure\n         */\n        testSuiteControllerFindOne: (id, params = {}) => this.request({\n            path: `/test-suite/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerUpdate\n         * @summary Update Test Suite\n         * @request PATCH:/test-suite/{id}\n         * @secure\n         */\n        testSuiteControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/test-suite/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerRemove\n         * @summary Delete Test Suite\n         * @request DELETE:/test-suite/{id}\n         * @secure\n         */\n        testSuiteControllerRemove: (id, params = {}) => this.request({\n            path: `/test-suite/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerFindAllPaginated\n         * @summary List Tests\n         * @request GET:/test-suite/{testSuiteId}/test\n         * @secure\n         */\n        testSuiteTestControllerFindAllPaginated: (testSuiteId, query, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerCreate\n         * @summary Create Test\n         * @request POST:/test-suite/{testSuiteId}/test\n         * @secure\n         */\n        testSuiteTestControllerCreate: (testSuiteId, data, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerFindOne\n         * @summary Get Test\n         * @request GET:/test-suite/{testSuiteId}/test/{id}\n         * @secure\n         */\n        testSuiteTestControllerFindOne: (testSuiteId, id, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerUpdate\n         * @summary Update Test\n         * @request PATCH:/test-suite/{testSuiteId}/test/{id}\n         * @secure\n         */\n        testSuiteTestControllerUpdate: (testSuiteId, id, data, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerRemove\n         * @summary Delete Test\n         * @request DELETE:/test-suite/{testSuiteId}/test/{id}\n         * @secure\n         */\n        testSuiteTestControllerRemove: (testSuiteId, id, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerFindAllPaginated\n         * @summary List Test Suite Runs\n         * @request GET:/test-suite/{testSuiteId}/run\n         * @secure\n         */\n        testSuiteRunControllerFindAllPaginated: (testSuiteId, query, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerCreate\n         * @summary Create Test Suite Run\n         * @request POST:/test-suite/{testSuiteId}/run\n         * @secure\n         */\n        testSuiteRunControllerCreate: (testSuiteId, data, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerFindOne\n         * @summary Get Test Suite Run\n         * @request GET:/test-suite/{testSuiteId}/run/{id}\n         * @secure\n         */\n        testSuiteRunControllerFindOne: (testSuiteId, id, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerUpdate\n         * @summary Update Test Suite Run\n         * @request PATCH:/test-suite/{testSuiteId}/run/{id}\n         * @secure\n         */\n        testSuiteRunControllerUpdate: (testSuiteId, id, data, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerRemove\n         * @summary Delete Test Suite Run\n         * @request DELETE:/test-suite/{testSuiteId}/run/{id}\n         * @secure\n         */\n        testSuiteRunControllerRemove: (testSuiteId, id, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    metrics = {\n        /**\n         * @description Use GET /metric instead\n         *\n         * @tags Analytics\n         * @name AnalyticsControllerFindAllDeprecated\n         * @summary List Billing Metrics\n         * @request GET:/metrics\n         * @deprecated\n         * @secure\n         */\n        analyticsControllerFindAllDeprecated: (query, params = {}) => this.request({\n            path: `/metrics`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    analytics = {\n        /**\n         * No description\n         *\n         * @tags Analytics\n         * @name AnalyticsControllerQuery\n         * @summary Create Analytics Queries\n         * @request POST:/analytics\n         * @secure\n         */\n        analyticsControllerQuery: (data, params = {}) => this.request({\n            path: `/analytics`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n    };\n    log = {\n        /**\n         * No description\n         *\n         * @tags Logs\n         * @name LoggingControllerCallLogsQuery\n         * @summary Get Call Logs\n         * @request GET:/log\n         * @secure\n         */\n        loggingControllerCallLogsQuery: (query, params = {}) => this.request({\n            path: `/log`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Logs\n         * @name LoggingControllerCallLogsDeleteQuery\n         * @summary Delete Call Logs\n         * @request DELETE:/log\n         * @secure\n         */\n        loggingControllerCallLogsDeleteQuery: (query, params = {}) => this.request({\n            path: `/log`,\n            method: 'DELETE',\n            query: query,\n            secure: true,\n            ...params,\n        }),\n    };\n    logs = {\n        /**\n         * No description\n         *\n         * @tags Logs\n         * @name LoggingControllerLogsQuery\n         * @summary Get Logs\n         * @request GET:/logs\n         * @deprecated\n         * @secure\n         */\n        loggingControllerLogsQuery: (query, params = {}) => this.request({\n            path: `/logs`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Logs\n         * @name LoggingControllerLogsDeleteQuery\n         * @summary Delete Logs\n         * @request DELETE:/logs\n         * @deprecated\n         * @secure\n         */\n        loggingControllerLogsDeleteQuery: (query, params = {}) => this.request({\n            path: `/logs`,\n            method: 'DELETE',\n            query: query,\n            secure: true,\n            ...params,\n        }),\n    };\n    org = {\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerCreate\n         * @summary Create Org\n         * @request POST:/org\n         * @secure\n         */\n        orgControllerCreate: (data, params = {}) => this.request({\n            path: `/org`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerFindAll\n         * @summary List Orgs\n         * @request GET:/org\n         * @secure\n         */\n        orgControllerFindAll: (params = {}) => this.request({\n            path: `/org`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerFindOne\n         * @summary Get Org\n         * @request GET:/org/{id}\n         * @secure\n         */\n        orgControllerFindOne: (id, params = {}) => this.request({\n            path: `/org/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerUpdate\n         * @summary Update Org\n         * @request PATCH:/org/{id}\n         * @secure\n         */\n        orgControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/org/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerDeleteOrg\n         * @summary Delete Org\n         * @request DELETE:/org/{id}\n         * @secure\n         */\n        orgControllerDeleteOrg: (id, params = {}) => this.request({\n            path: `/org/${id}`,\n            method: 'DELETE',\n            secure: true,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerFindAllUsers\n         * @summary List Users\n         * @request GET:/org/{id}/user\n         * @secure\n         */\n        orgControllerFindAllUsers: (id, params = {}) => this.request({\n            path: `/org/${id}/user`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerOrgLeave\n         * @summary Leave Org\n         * @request DELETE:/org/{id}/leave\n         * @secure\n         */\n        orgControllerOrgLeave: (id, params = {}) => this.request({\n            path: `/org/${id}/leave`,\n            method: 'DELETE',\n            secure: true,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerOrgRemoveUser\n         * @summary Remove Org Member\n         * @request DELETE:/org/{id}/member/{memberId}/leave\n         * @secure\n         */\n        orgControllerOrgRemoveUser: (id, memberId, params = {}) => this.request({\n            path: `/org/${id}/member/${memberId}/leave`,\n            method: 'DELETE',\n            secure: true,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerUsersInvite\n         * @summary Invite User\n         * @request POST:/org/{id}/invite\n         * @secure\n         */\n        orgControllerUsersInvite: (id, data, params = {}) => this.request({\n            path: `/org/${id}/invite`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerUserUpdate\n         * @summary Update User Role\n         * @request PATCH:/org/{id}/role\n         * @secure\n         */\n        orgControllerUserUpdate: (id, data, params = {}) => this.request({\n            path: `/org/${id}/role`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            ...params,\n        }),\n    };\n    token = {\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerCreate\n         * @summary Create Token\n         * @request POST:/token\n         * @secure\n         */\n        tokenControllerCreate: (data, params = {}) => this.request({\n            path: `/token`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerFindAll\n         * @summary List Tokens\n         * @request GET:/token\n         * @secure\n         */\n        tokenControllerFindAll: (query, params = {}) => this.request({\n            path: `/token`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerFindOne\n         * @summary Get Token\n         * @request GET:/token/{id}\n         * @secure\n         */\n        tokenControllerFindOne: (id, params = {}) => this.request({\n            path: `/token/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerUpdate\n         * @summary Update Token\n         * @request PATCH:/token/{id}\n         * @secure\n         */\n        tokenControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/token/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerRemove\n         * @summary Delete Token\n         * @request DELETE:/token/{id}\n         * @secure\n         */\n        tokenControllerRemove: (id, params = {}) => this.request({\n            path: `/token/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    credential = {\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerCreate\n         * @summary Create Credential\n         * @request POST:/credential\n         * @secure\n         */\n        credentialControllerCreate: (data, params = {}) => this.request({\n            path: `/credential`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerFindAll\n         * @summary List Credentials\n         * @request GET:/credential\n         * @secure\n         */\n        credentialControllerFindAll: (query, params = {}) => this.request({\n            path: `/credential`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerFindOne\n         * @summary Get Credential\n         * @request GET:/credential/{id}\n         * @secure\n         */\n        credentialControllerFindOne: (id, params = {}) => this.request({\n            path: `/credential/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerUpdate\n         * @summary Update Credential\n         * @request PATCH:/credential/{id}\n         * @secure\n         */\n        credentialControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/credential/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerRemove\n         * @summary Delete Credential\n         * @request DELETE:/credential/{id}\n         * @secure\n         */\n        credentialControllerRemove: (id, params = {}) => this.request({\n            path: `/credential/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerGenerateSession\n         * @summary Generate a credential session\n         * @request POST:/credential/session\n         * @secure\n         */\n        credentialControllerGenerateSession: (data, params = {}) => this.request({\n            path: `/credential/session`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerHandleWebhook\n         * @summary Handle credential webhook\n         * @request POST:/credential/webhook\n         */\n        credentialControllerHandleWebhook: (data, params = {}) => this.request({\n            path: `/credential/webhook`,\n            method: 'POST',\n            body: data,\n            type: ContentType.Json,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerTriggerCredentialAction\n         * @summary Trigger a credential action\n         * @request POST:/credential/trigger\n         * @secure\n         */\n        credentialControllerTriggerCredentialAction: (data, params = {}) => this.request({\n            path: `/credential/trigger`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            ...params,\n        }),\n    };\n    template = {\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerCreate\n         * @summary Create Template\n         * @request POST:/template\n         * @secure\n         */\n        templateControllerCreate: (data, params = {}) => this.request({\n            path: `/template`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerFindAll\n         * @summary List Templates\n         * @request GET:/template\n         * @secure\n         */\n        templateControllerFindAll: (query, params = {}) => this.request({\n            path: `/template`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerFindAllPinned\n         * @summary List Templates\n         * @request GET:/template/pinned\n         * @secure\n         */\n        templateControllerFindAllPinned: (params = {}) => this.request({\n            path: `/template/pinned`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerFindOne\n         * @summary Get Template\n         * @request GET:/template/{id}\n         * @secure\n         */\n        templateControllerFindOne: (id, params = {}) => this.request({\n            path: `/template/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerUpdate\n         * @summary Update Template\n         * @request PATCH:/template/{id}\n         * @secure\n         */\n        templateControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/template/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerRemove\n         * @summary Delete Template\n         * @request DELETE:/template/{id}\n         * @secure\n         */\n        templateControllerRemove: (id, params = {}) => this.request({\n            path: `/template/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    voiceLibrary = {\n        /**\n         * No description\n         *\n         * @tags Voice Library\n         * @name VoiceLibraryControllerVoiceGetByProvider\n         * @summary Get voices in Voice Library by Provider\n         * @request GET:/voice-library/{provider}\n         * @secure\n         */\n        voiceLibraryControllerVoiceGetByProvider: (provider, query, params = {}) => this.request({\n            path: `/voice-library/${provider}`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Voice Library\n         * @name VoiceLibraryControllerVoiceGetAccentsByProvider\n         * @summary Get accents in Voice Library by Provider\n         * @request GET:/voice-library/{provider}/accents\n         * @secure\n         */\n        voiceLibraryControllerVoiceGetAccentsByProvider: (provider, params = {}) => this.request({\n            path: `/voice-library/${provider}/accents`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Voice Library\n         * @name VoiceLibraryControllerVoiceLibrarySyncByProvider\n         * @summary Sync Private voices in Voice Library by Provider\n         * @request POST:/voice-library/sync/{provider}\n         * @secure\n         */\n        voiceLibraryControllerVoiceLibrarySyncByProvider: (provider, params = {}) => this.request({\n            path: `/voice-library/sync/${provider}`,\n            method: 'POST',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Voice Library\n         * @name VoiceLibraryControllerVoiceLibrarySyncDefaultVoices\n         * @summary Sync Default voices in Voice Library by Providers\n         * @request POST:/voice-library/sync\n         * @secure\n         */\n        voiceLibraryControllerVoiceLibrarySyncDefaultVoices: (data, params = {}) => this.request({\n            path: `/voice-library/sync`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n    };\n    provider = {\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name ProviderControllerGetWorkflows\n         * @request GET:/{provider}/workflows\n         * @secure\n         */\n        providerControllerGetWorkflows: (provider, query, params = {}) => this.request({\n            path: `/${provider}/workflows`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name ProviderControllerGetWorkflowTriggerHook\n         * @request GET:/{provider}/workflows/{workflowId}/hooks\n         * @secure\n         */\n        providerControllerGetWorkflowTriggerHook: (provider, workflowId, params = {}) => this.request({\n            path: `/${provider}/workflows/${workflowId}/hooks`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name ProviderControllerGetLocations\n         * @request GET:/{provider}/locations\n         * @secure\n         */\n        providerControllerGetLocations: (provider, params = {}) => this.request({\n            path: `/${provider}/locations`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerSearchVoices\n         * @summary Search Voice from Provider Voice Library.\n         * @request GET:/{provider}/voices/search\n         * @deprecated\n         * @secure\n         */\n        voiceProviderControllerSearchVoices: (provider, query, params = {}) => this.request({\n            path: `/${provider}/voices/search`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerSearchVoice\n         * @summary Search Voice from Provider Voice Library.\n         * @request GET:/{provider}/voice/search\n         * @secure\n         */\n        voiceProviderControllerSearchVoice: (provider, query, params = {}) => this.request({\n            path: `/${provider}/voice/search`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerAddVoices\n         * @summary Add Shared Voice to your Provider Account.\n         * @request POST:/{provider}/voices/add\n         * @deprecated\n         * @secure\n         */\n        voiceProviderControllerAddVoices: (provider, data, params = {}) => this.request({\n            path: `/${provider}/voices/add`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerAddVoice\n         * @summary Add Shared Voice to your Provider Account.\n         * @request POST:/{provider}/voice/add\n         * @secure\n         */\n        voiceProviderControllerAddVoice: (provider, data, params = {}) => this.request({\n            path: `/${provider}/voice/add`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n    };\n    v11Labs = {\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerCloneVoices\n         * @summary Clone a voice to the provider account and add to Vapi Voice Library.\n         * @request POST:/11labs/voice/clone\n         * @secure\n         */\n        voiceProviderControllerCloneVoices: (data, params = {}) => this.request({\n            path: `/11labs/voice/clone`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.FormData,\n            ...params,\n        }),\n    };\n}\nexports.Api = Api;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2083, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/node_modules/%40vapi-ai/web/dist/client.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.client = void 0;\nconst api_1 = require(\"./api\");\nconst api = new api_1.Api({\n    baseUrl: \"https://api.vapi.ai\",\n    baseApiParams: {\n        secure: true,\n    },\n    securityWorker: async (securityData) => {\n        if (securityData) {\n            return {\n                headers: {\n                    Authorization: `Bearer ${securityData}`,\n                },\n            };\n        }\n    },\n});\nexports.client = api;\n"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,MAAM,GAAG,KAAK;AACtB,MAAM;AACN,MAAM,MAAM,IAAI,MAAM,GAAG,CAAC;IACtB,SAAS;IACT,eAAe;QACX,QAAQ;IACZ;IACA,gBAAgB,OAAO;QACnB,IAAI,cAAc;YACd,OAAO;gBACH,SAAS;oBACL,eAAe,CAAC,OAAO,EAAE,cAAc;gBAC3C;YACJ;QACJ;IACJ;AACJ;AACA,QAAQ,MAAM,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2110, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/node_modules/%40vapi-ai/web/dist/vapi.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst daily_js_1 = __importDefault(require(\"@daily-co/daily-js\"));\nconst events_1 = __importDefault(require(\"events\"));\nconst client_1 = require(\"./client\");\nasync function startAudioPlayer(player, track) {\n    player.muted = false;\n    player.autoplay = true;\n    if (track != null) {\n        player.srcObject = new MediaStream([track]);\n        await player.play();\n    }\n}\nasync function buildAudioPlayer(track, participantId) {\n    const player = document.createElement('audio');\n    player.dataset.participantId = participantId;\n    document.body.appendChild(player);\n    await startAudioPlayer(player, track);\n    return player;\n}\nfunction destroyAudioPlayer(participantId) {\n    const player = document.querySelector(`audio[data-participant-id=\"${participantId}\"]`);\n    player?.remove();\n}\nfunction subscribeToTracks(e, call, isVideoRecordingEnabled, isVideoEnabled) {\n    if (e.participant.local)\n        return;\n    call.updateParticipant(e.participant.session_id, {\n        setSubscribedTracks: {\n            audio: true,\n            video: isVideoRecordingEnabled || isVideoEnabled,\n        },\n    });\n}\nclass VapiEventEmitter extends events_1.default {\n    on(event, listener) {\n        super.on(event, listener);\n        return this;\n    }\n    once(event, listener) {\n        super.once(event, listener);\n        return this;\n    }\n    emit(event, ...args) {\n        return super.emit(event, ...args);\n    }\n    removeListener(event, listener) {\n        super.removeListener(event, listener);\n        return this;\n    }\n    removeAllListeners(event) {\n        super.removeAllListeners(event);\n        return this;\n    }\n}\nclass Vapi extends VapiEventEmitter {\n    started = false;\n    call = null;\n    speakingTimeout = null;\n    dailyCallConfig = {};\n    dailyCallObject = {};\n    hasEmittedCallEndedStatus = false;\n    constructor(apiToken, apiBaseUrl, dailyCallConfig, dailyCallObject) {\n        super();\n        client_1.client.baseUrl = apiBaseUrl ?? 'https://api.vapi.ai';\n        client_1.client.setSecurityData(apiToken);\n        this.dailyCallConfig = dailyCallConfig ?? {};\n        this.dailyCallObject = dailyCallObject ?? {};\n    }\n    cleanup() {\n        this.started = false;\n        this.hasEmittedCallEndedStatus = false;\n        this.call?.destroy();\n        this.call = null;\n        this.speakingTimeout = null;\n    }\n    isMobileDevice() {\n        if (typeof navigator === 'undefined') {\n            return false;\n        }\n        const userAgent = navigator.userAgent;\n        return /android|iphone|ipad|ipod|iemobile|blackberry|bada/i.test(userAgent.toLowerCase());\n    }\n    async sleep(ms) {\n        return new Promise((resolve) => setTimeout(resolve, ms));\n    }\n    async start(assistant, assistantOverrides, squad) {\n        if (!assistant && !squad) {\n            throw new Error('Assistant or Squad must be provided.');\n        }\n        if (this.started) {\n            return null;\n        }\n        this.started = true;\n        try {\n            const webCall = (await client_1.client.call.callControllerCreateWebCall({\n                assistant: typeof assistant === 'string' ? undefined : assistant,\n                assistantId: typeof assistant === 'string' ? assistant : undefined,\n                assistantOverrides,\n                squad: typeof squad === 'string' ? undefined : squad,\n                squadId: typeof squad === 'string' ? squad : undefined,\n            })).data;\n            if (this.call) {\n                this.cleanup();\n            }\n            const isVideoRecordingEnabled = webCall?.artifactPlan?.videoRecordingEnabled ?? false;\n            const isVideoEnabled = webCall.transport?.assistantVideoEnabled ?? false;\n            this.call = daily_js_1.default.createCallObject({\n                audioSource: this.dailyCallObject.audioSource ?? true,\n                videoSource: this.dailyCallObject.videoSource ?? isVideoRecordingEnabled,\n                dailyConfig: this.dailyCallConfig,\n            });\n            this.call.iframe()?.style.setProperty('display', 'none');\n            this.call.on('left-meeting', () => {\n                this.emit('call-end');\n                if (!this.hasEmittedCallEndedStatus) {\n                    this.emit('message', {\n                        type: 'status-update',\n                        status: 'ended',\n                        'endedReason': 'customer-ended-call',\n                    });\n                    this.hasEmittedCallEndedStatus = true;\n                }\n                if (isVideoRecordingEnabled) {\n                    this.call?.stopRecording();\n                }\n                this.cleanup();\n            });\n            this.call.on('error', (error) => {\n                this.emit('error', error);\n                if (isVideoRecordingEnabled) {\n                    this.call?.stopRecording();\n                }\n            });\n            this.call.on('camera-error', (error) => {\n                this.emit('error', error);\n            });\n            this.call.on('track-started', async (e) => {\n                if (!e || !e.participant) {\n                    return;\n                }\n                if (e.participant?.local) {\n                    return;\n                }\n                if (e.participant?.user_name !== 'Vapi Speaker') {\n                    return;\n                }\n                if (e.track.kind === 'video') {\n                    this.emit('video', e.track);\n                }\n                if (e.track.kind === 'audio') {\n                    await buildAudioPlayer(e.track, e.participant.session_id);\n                }\n                this.call?.sendAppMessage('playable');\n            });\n            this.call.on('participant-joined', (e) => {\n                if (!e || !this.call)\n                    return;\n                subscribeToTracks(e, this.call, isVideoRecordingEnabled, isVideoEnabled);\n            });\n            this.call.on('participant-updated', (e) => {\n                if (!e) {\n                    return;\n                }\n                this.emit('daily-participant-updated', e.participant);\n            });\n            this.call.on('participant-left', (e) => {\n                if (!e) {\n                    return;\n                }\n                destroyAudioPlayer(e.participant.session_id);\n            });\n            // Allow mobile devices to finish processing the microphone permissions\n            // request before joining the call and playing the assistant's audio\n            if (this.isMobileDevice()) {\n                await this.sleep(1000);\n            }\n            await this.call.join({\n                // @ts-expect-error This exists\n                url: webCall.webCallUrl,\n                subscribeToTracksAutomatically: false,\n            });\n            if (isVideoRecordingEnabled) {\n                const recordingRequestedTime = new Date().getTime();\n                this.call.startRecording({\n                    width: 1280,\n                    height: 720,\n                    backgroundColor: '#FF1F2D3D',\n                    layout: {\n                        preset: 'default',\n                    },\n                });\n                this.call.on('recording-started', () => {\n                    this.send({\n                        type: 'control',\n                        control: 'say-first-message',\n                        videoRecordingStartDelaySeconds: (new Date().getTime() - recordingRequestedTime) / 1000,\n                    });\n                });\n            }\n            this.call.startRemoteParticipantsAudioLevelObserver(100);\n            this.call.on('remote-participants-audio-level', (e) => {\n                if (e)\n                    this.handleRemoteParticipantsAudioLevel(e);\n            });\n            this.call.on('app-message', (e) => this.onAppMessage(e));\n            this.call.on('nonfatal-error', (e) => {\n                // https://docs.daily.co/reference/daily-js/events/meeting-events#type-audio-processor-error\n                if (e?.type === 'audio-processor-error') {\n                    this.call\n                        ?.updateInputSettings({\n                        audio: {\n                            processor: {\n                                type: 'none',\n                            },\n                        },\n                    })\n                        .then(() => {\n                        this.call?.setLocalAudio(true);\n                    });\n                }\n            });\n            this.call.updateInputSettings({\n                audio: {\n                    processor: {\n                        type: 'noise-cancellation',\n                    },\n                },\n            });\n            return webCall;\n        }\n        catch (e) {\n            console.error(e);\n            this.emit('error', e);\n            this.cleanup();\n            return null;\n        }\n    }\n    onAppMessage(e) {\n        if (!e) {\n            return;\n        }\n        try {\n            if (e.data === 'listening') {\n                return this.emit('call-start');\n            }\n            else {\n                try {\n                    const parsedMessage = JSON.parse(e.data);\n                    this.emit('message', parsedMessage);\n                    if (parsedMessage && 'type' in parsedMessage && 'status' in parsedMessage && parsedMessage.type === 'status-update' && parsedMessage.status === 'ended') {\n                        this.hasEmittedCallEndedStatus = true;\n                    }\n                }\n                catch (parseError) {\n                    console.log('Error parsing message data: ', parseError);\n                }\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n    handleRemoteParticipantsAudioLevel(e) {\n        const speechLevel = Object.values(e.participantsAudioLevel).reduce((a, b) => a + b, 0);\n        this.emit('volume-level', Math.min(1, speechLevel / 0.15));\n        const isSpeaking = speechLevel > 0.01;\n        if (!isSpeaking) {\n            return;\n        }\n        if (this.speakingTimeout) {\n            clearTimeout(this.speakingTimeout);\n            this.speakingTimeout = null;\n        }\n        else {\n            this.emit('speech-start');\n        }\n        this.speakingTimeout = setTimeout(() => {\n            this.emit('speech-end');\n            this.speakingTimeout = null;\n        }, 1000);\n    }\n    stop() {\n        this.started = false;\n        this.call?.destroy();\n        this.call = null;\n    }\n    send(message) {\n        this.call?.sendAppMessage(JSON.stringify(message));\n    }\n    setMuted(mute) {\n        if (!this.call) {\n            throw new Error('Call object is not available.');\n        }\n        this.call.setLocalAudio(!mute);\n    }\n    isMuted() {\n        if (!this.call) {\n            return false;\n        }\n        return this.call.localAudio() === false;\n    }\n    say(message, endCallAfterSpoken, interruptionsEnabled) {\n        this.send({\n            type: 'say',\n            message,\n            endCallAfterSpoken,\n            interruptionsEnabled: interruptionsEnabled ?? false,\n        });\n    }\n    setInputDevicesAsync(options) {\n        this.call?.setInputDevicesAsync(options);\n    }\n    async increaseMicLevel(gain) {\n        if (!this.call) {\n            throw new Error('Call object is not available.');\n        }\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            const audioContext = new AudioContext();\n            const source = audioContext.createMediaStreamSource(stream);\n            const gainNode = audioContext.createGain();\n            gainNode.gain.value = gain;\n            source.connect(gainNode);\n            const destination = audioContext.createMediaStreamDestination();\n            gainNode.connect(destination);\n            const [boostedTrack] = destination.stream.getAudioTracks();\n            await this.call.setInputDevicesAsync({ audioSource: boostedTrack });\n        }\n        catch (error) {\n            console.error(\"Error adjusting microphone level:\", error);\n        }\n    }\n    setOutputDeviceAsync(options) {\n        this.call?.setOutputDeviceAsync(options);\n    }\n    getDailyCallObject() {\n        return this.call;\n    }\n    startScreenSharing(displayMediaOptions, screenVideoSendSettings) {\n        this.call?.startScreenShare({\n            displayMediaOptions,\n            screenVideoSendSettings,\n        });\n    }\n    stopScreenSharing() {\n        this.call?.stopScreenShare();\n    }\n}\nexports.default = Vapi;\n"],"names":[],"mappings":"AAAA;AACA,IAAI,kBAAkB,AAAC,IAAI,IAAI,IAAI,CAAC,eAAe,IAAK,SAAU,GAAG;IACjE,OAAO,AAAC,OAAO,IAAI,UAAU,GAAI,MAAM;QAAE,WAAW;IAAI;AAC5D;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,MAAM,aAAa;AACnB,MAAM,WAAW;AACjB,MAAM;AACN,eAAe,iBAAiB,MAAM,EAAE,KAAK;IACzC,OAAO,KAAK,GAAG;IACf,OAAO,QAAQ,GAAG;IAClB,IAAI,SAAS,MAAM;QACf,OAAO,SAAS,GAAG,IAAI,YAAY;YAAC;SAAM;QAC1C,MAAM,OAAO,IAAI;IACrB;AACJ;AACA,eAAe,iBAAiB,KAAK,EAAE,aAAa;IAChD,MAAM,SAAS,SAAS,aAAa,CAAC;IACtC,OAAO,OAAO,CAAC,aAAa,GAAG;IAC/B,SAAS,IAAI,CAAC,WAAW,CAAC;IAC1B,MAAM,iBAAiB,QAAQ;IAC/B,OAAO;AACX;AACA,SAAS,mBAAmB,aAAa;IACrC,MAAM,SAAS,SAAS,aAAa,CAAC,CAAC,2BAA2B,EAAE,cAAc,EAAE,CAAC;IACrF,QAAQ;AACZ;AACA,SAAS,kBAAkB,CAAC,EAAE,IAAI,EAAE,uBAAuB,EAAE,cAAc;IACvE,IAAI,EAAE,WAAW,CAAC,KAAK,EACnB;IACJ,KAAK,iBAAiB,CAAC,EAAE,WAAW,CAAC,UAAU,EAAE;QAC7C,qBAAqB;YACjB,OAAO;YACP,OAAO,2BAA2B;QACtC;IACJ;AACJ;AACA,MAAM,yBAAyB,SAAS,OAAO;IAC3C,GAAG,KAAK,EAAE,QAAQ,EAAE;QAChB,KAAK,CAAC,GAAG,OAAO;QAChB,OAAO,IAAI;IACf;IACA,KAAK,KAAK,EAAE,QAAQ,EAAE;QAClB,KAAK,CAAC,KAAK,OAAO;QAClB,OAAO,IAAI;IACf;IACA,KAAK,KAAK,EAAE,GAAG,IAAI,EAAE;QACjB,OAAO,KAAK,CAAC,KAAK,UAAU;IAChC;IACA,eAAe,KAAK,EAAE,QAAQ,EAAE;QAC5B,KAAK,CAAC,eAAe,OAAO;QAC5B,OAAO,IAAI;IACf;IACA,mBAAmB,KAAK,EAAE;QACtB,KAAK,CAAC,mBAAmB;QACzB,OAAO,IAAI;IACf;AACJ;AACA,MAAM,aAAa;IACf,UAAU,MAAM;IAChB,OAAO,KAAK;IACZ,kBAAkB,KAAK;IACvB,kBAAkB,CAAC,EAAE;IACrB,kBAAkB,CAAC,EAAE;IACrB,4BAA4B,MAAM;IAClC,YAAY,QAAQ,EAAE,UAAU,EAAE,eAAe,EAAE,eAAe,CAAE;QAChE,KAAK;QACL,SAAS,MAAM,CAAC,OAAO,GAAG,cAAc;QACxC,SAAS,MAAM,CAAC,eAAe,CAAC;QAChC,IAAI,CAAC,eAAe,GAAG,mBAAmB,CAAC;QAC3C,IAAI,CAAC,eAAe,GAAG,mBAAmB,CAAC;IAC/C;IACA,UAAU;QACN,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,yBAAyB,GAAG;QACjC,IAAI,CAAC,IAAI,EAAE;QACX,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,eAAe,GAAG;IAC3B;IACA,iBAAiB;QACb,IAAI,OAAO,cAAc,aAAa;YAClC,OAAO;QACX;QACA,MAAM,YAAY,UAAU,SAAS;QACrC,OAAO,qDAAqD,IAAI,CAAC,UAAU,WAAW;IAC1F;IACA,MAAM,MAAM,EAAE,EAAE;QACZ,OAAO,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACxD;IACA,MAAM,MAAM,SAAS,EAAE,kBAAkB,EAAE,KAAK,EAAE;QAC9C,IAAI,CAAC,aAAa,CAAC,OAAO;YACtB,MAAM,IAAI,MAAM;QACpB;QACA,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,OAAO;QACX;QACA,IAAI,CAAC,OAAO,GAAG;QACf,IAAI;YACA,MAAM,UAAU,CAAC,MAAM,SAAS,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC;gBACpE,WAAW,OAAO,cAAc,WAAW,YAAY;gBACvD,aAAa,OAAO,cAAc,WAAW,YAAY;gBACzD;gBACA,OAAO,OAAO,UAAU,WAAW,YAAY;gBAC/C,SAAS,OAAO,UAAU,WAAW,QAAQ;YACjD,EAAE,EAAE,IAAI;YACR,IAAI,IAAI,CAAC,IAAI,EAAE;gBACX,IAAI,CAAC,OAAO;YAChB;YACA,MAAM,0BAA0B,SAAS,cAAc,yBAAyB;YAChF,MAAM,iBAAiB,QAAQ,SAAS,EAAE,yBAAyB;YACnE,IAAI,CAAC,IAAI,GAAG,WAAW,OAAO,CAAC,gBAAgB,CAAC;gBAC5C,aAAa,IAAI,CAAC,eAAe,CAAC,WAAW,IAAI;gBACjD,aAAa,IAAI,CAAC,eAAe,CAAC,WAAW,IAAI;gBACjD,aAAa,IAAI,CAAC,eAAe;YACrC;YACA,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,MAAM,YAAY,WAAW;YACjD,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB;gBACzB,IAAI,CAAC,IAAI,CAAC;gBACV,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;oBACjC,IAAI,CAAC,IAAI,CAAC,WAAW;wBACjB,MAAM;wBACN,QAAQ;wBACR,eAAe;oBACnB;oBACA,IAAI,CAAC,yBAAyB,GAAG;gBACrC;gBACA,IAAI,yBAAyB;oBACzB,IAAI,CAAC,IAAI,EAAE;gBACf;gBACA,IAAI,CAAC,OAAO;YAChB;YACA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC;gBACnB,IAAI,CAAC,IAAI,CAAC,SAAS;gBACnB,IAAI,yBAAyB;oBACzB,IAAI,CAAC,IAAI,EAAE;gBACf;YACJ;YACA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC;gBAC1B,IAAI,CAAC,IAAI,CAAC,SAAS;YACvB;YACA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,iBAAiB,OAAO;gBACjC,IAAI,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE;oBACtB;gBACJ;gBACA,IAAI,EAAE,WAAW,EAAE,OAAO;oBACtB;gBACJ;gBACA,IAAI,EAAE,WAAW,EAAE,cAAc,gBAAgB;oBAC7C;gBACJ;gBACA,IAAI,EAAE,KAAK,CAAC,IAAI,KAAK,SAAS;oBAC1B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK;gBAC9B;gBACA,IAAI,EAAE,KAAK,CAAC,IAAI,KAAK,SAAS;oBAC1B,MAAM,iBAAiB,EAAE,KAAK,EAAE,EAAE,WAAW,CAAC,UAAU;gBAC5D;gBACA,IAAI,CAAC,IAAI,EAAE,eAAe;YAC9B;YACA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,sBAAsB,CAAC;gBAChC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAChB;gBACJ,kBAAkB,GAAG,IAAI,CAAC,IAAI,EAAE,yBAAyB;YAC7D;YACA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,uBAAuB,CAAC;gBACjC,IAAI,CAAC,GAAG;oBACJ;gBACJ;gBACA,IAAI,CAAC,IAAI,CAAC,6BAA6B,EAAE,WAAW;YACxD;YACA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC;gBAC9B,IAAI,CAAC,GAAG;oBACJ;gBACJ;gBACA,mBAAmB,EAAE,WAAW,CAAC,UAAU;YAC/C;YACA,uEAAuE;YACvE,oEAAoE;YACpE,IAAI,IAAI,CAAC,cAAc,IAAI;gBACvB,MAAM,IAAI,CAAC,KAAK,CAAC;YACrB;YACA,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;gBACjB,+BAA+B;gBAC/B,KAAK,QAAQ,UAAU;gBACvB,gCAAgC;YACpC;YACA,IAAI,yBAAyB;gBACzB,MAAM,yBAAyB,IAAI,OAAO,OAAO;gBACjD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;oBACrB,OAAO;oBACP,QAAQ;oBACR,iBAAiB;oBACjB,QAAQ;wBACJ,QAAQ;oBACZ;gBACJ;gBACA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,qBAAqB;oBAC9B,IAAI,CAAC,IAAI,CAAC;wBACN,MAAM;wBACN,SAAS;wBACT,iCAAiC,CAAC,IAAI,OAAO,OAAO,KAAK,sBAAsB,IAAI;oBACvF;gBACJ;YACJ;YACA,IAAI,CAAC,IAAI,CAAC,yCAAyC,CAAC;YACpD,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,mCAAmC,CAAC;gBAC7C,IAAI,GACA,IAAI,CAAC,kCAAkC,CAAC;YAChD;YACA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,IAAM,IAAI,CAAC,YAAY,CAAC;YACrD,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,kBAAkB,CAAC;gBAC5B,4FAA4F;gBAC5F,IAAI,GAAG,SAAS,yBAAyB;oBACrC,IAAI,CAAC,IAAI,EACH,oBAAoB;wBACtB,OAAO;4BACH,WAAW;gCACP,MAAM;4BACV;wBACJ;oBACJ,GACK,KAAK;wBACN,IAAI,CAAC,IAAI,EAAE,cAAc;oBAC7B;gBACJ;YACJ;YACA,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC;gBAC1B,OAAO;oBACH,WAAW;wBACP,MAAM;oBACV;gBACJ;YACJ;YACA,OAAO;QACX,EACA,OAAO,GAAG;YACN,QAAQ,KAAK,CAAC;YACd,IAAI,CAAC,IAAI,CAAC,SAAS;YACnB,IAAI,CAAC,OAAO;YACZ,OAAO;QACX;IACJ;IACA,aAAa,CAAC,EAAE;QACZ,IAAI,CAAC,GAAG;YACJ;QACJ;QACA,IAAI;YACA,IAAI,EAAE,IAAI,KAAK,aAAa;gBACxB,OAAO,IAAI,CAAC,IAAI,CAAC;YACrB,OACK;gBACD,IAAI;oBACA,MAAM,gBAAgB,KAAK,KAAK,CAAC,EAAE,IAAI;oBACvC,IAAI,CAAC,IAAI,CAAC,WAAW;oBACrB,IAAI,iBAAiB,UAAU,iBAAiB,YAAY,iBAAiB,cAAc,IAAI,KAAK,mBAAmB,cAAc,MAAM,KAAK,SAAS;wBACrJ,IAAI,CAAC,yBAAyB,GAAG;oBACrC;gBACJ,EACA,OAAO,YAAY;oBACf,QAAQ,GAAG,CAAC,gCAAgC;gBAChD;YACJ;QACJ,EACA,OAAO,GAAG;YACN,QAAQ,KAAK,CAAC;QAClB;IACJ;IACA,mCAAmC,CAAC,EAAE;QAClC,MAAM,cAAc,OAAO,MAAM,CAAC,EAAE,sBAAsB,EAAE,MAAM,CAAC,CAAC,GAAG,IAAM,IAAI,GAAG;QACpF,IAAI,CAAC,IAAI,CAAC,gBAAgB,KAAK,GAAG,CAAC,GAAG,cAAc;QACpD,MAAM,aAAa,cAAc;QACjC,IAAI,CAAC,YAAY;YACb;QACJ;QACA,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,aAAa,IAAI,CAAC,eAAe;YACjC,IAAI,CAAC,eAAe,GAAG;QAC3B,OACK;YACD,IAAI,CAAC,IAAI,CAAC;QACd;QACA,IAAI,CAAC,eAAe,GAAG,WAAW;YAC9B,IAAI,CAAC,IAAI,CAAC;YACV,IAAI,CAAC,eAAe,GAAG;QAC3B,GAAG;IACP;IACA,OAAO;QACH,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,IAAI,EAAE;QACX,IAAI,CAAC,IAAI,GAAG;IAChB;IACA,KAAK,OAAO,EAAE;QACV,IAAI,CAAC,IAAI,EAAE,eAAe,KAAK,SAAS,CAAC;IAC7C;IACA,SAAS,IAAI,EAAE;QACX,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACZ,MAAM,IAAI,MAAM;QACpB;QACA,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC7B;IACA,UAAU;QACN,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACZ,OAAO;QACX;QACA,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,OAAO;IACtC;IACA,IAAI,OAAO,EAAE,kBAAkB,EAAE,oBAAoB,EAAE;QACnD,IAAI,CAAC,IAAI,CAAC;YACN,MAAM;YACN;YACA;YACA,sBAAsB,wBAAwB;QAClD;IACJ;IACA,qBAAqB,OAAO,EAAE;QAC1B,IAAI,CAAC,IAAI,EAAE,qBAAqB;IACpC;IACA,MAAM,iBAAiB,IAAI,EAAE;QACzB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACZ,MAAM,IAAI,MAAM;QACpB;QACA,IAAI;YACA,MAAM,SAAS,MAAM,UAAU,YAAY,CAAC,YAAY,CAAC;gBAAE,OAAO;YAAK;YACvE,MAAM,eAAe,IAAI;YACzB,MAAM,SAAS,aAAa,uBAAuB,CAAC;YACpD,MAAM,WAAW,aAAa,UAAU;YACxC,SAAS,IAAI,CAAC,KAAK,GAAG;YACtB,OAAO,OAAO,CAAC;YACf,MAAM,cAAc,aAAa,4BAA4B;YAC7D,SAAS,OAAO,CAAC;YACjB,MAAM,CAAC,aAAa,GAAG,YAAY,MAAM,CAAC,cAAc;YACxD,MAAM,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC;gBAAE,aAAa;YAAa;QACrE,EACA,OAAO,OAAO;YACV,QAAQ,KAAK,CAAC,qCAAqC;QACvD;IACJ;IACA,qBAAqB,OAAO,EAAE;QAC1B,IAAI,CAAC,IAAI,EAAE,qBAAqB;IACpC;IACA,qBAAqB;QACjB,OAAO,IAAI,CAAC,IAAI;IACpB;IACA,mBAAmB,mBAAmB,EAAE,uBAAuB,EAAE;QAC7D,IAAI,CAAC,IAAI,EAAE,iBAAiB;YACxB;YACA;QACJ;IACJ;IACA,oBAAoB;QAChB,IAAI,CAAC,IAAI,EAAE;IACf;AACJ;AACA,QAAQ,OAAO,GAAG","ignoreList":[0],"debugId":null}}]
}