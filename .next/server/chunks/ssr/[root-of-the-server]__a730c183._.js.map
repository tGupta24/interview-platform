{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/lib/vapi.sdk.ts"],"sourcesContent":["import Vapi from \"@vapi-ai/web\";\r\n\r\nexport const vapi = new Vapi(process.env.NEXT_PUBLIC_VAPI_WEB_TOKEN!);\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,OAAO,IAAI,mJAAA,CAAA,UAAI","debugId":null}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/lib/actions/general.action.ts"],"sourcesContent":["\"use server\";\n\nimport { generateObject } from \"ai\";\nimport { google } from \"@ai-sdk/google\";\n\nimport { db } from \"@/firebase/admin\";\nimport { feedbackSchema } from \"@/constants\";\n\nexport async function createFeedback(params: CreateFeedbackParams) {\n  const { interviewId, userId, transcript, feedbackId } = params;\n\n  try {\n    const formattedTranscript = transcript\n      .map(\n        (sentence: { role: string; content: string }) =>\n          `- ${sentence.role}: ${sentence.content}\\n`\n      )\n      .join(\"\");\n\n    const { object } = await generateObject({\n      model: google(\"gemini-2.0-flash-001\", {\n        structuredOutputs: false,\n      }),\n      schema: feedbackSchema,\n      prompt: `\n        You are an AI interviewer analyzing a mock interview. Your task is to evaluate the candidate based on structured categories. Be thorough and detailed in your analysis. Don't be lenient with the candidate. If there are mistakes or areas for improvement, point them out.\n        Transcript:\n        ${formattedTranscript}\n\n        Please score the candidate from 0 to 100 in the following areas. Do not add categories other than the ones provided:\n        - **Communication Skills**: Clarity, articulation, structured responses.\n        - **Technical Knowledge**: Understanding of key concepts for the role.\n        - **Problem-Solving**: Ability to analyze problems and propose solutions.\n        - **Cultural & Role Fit**: Alignment with company values and job role.\n        - **Confidence & Clarity**: Confidence in responses, engagement, and clarity.\n        `,\n      system:\n        \"You are a professional interviewer analyzing a mock interview. Your task is to evaluate the candidate based on structured categories\",\n    });\n\n    const feedback = {\n      interviewId: interviewId,\n      userId: userId,\n      totalScore: object.totalScore,\n      categoryScores: object.categoryScores,\n      strengths: object.strengths,\n      areasForImprovement: object.areasForImprovement,\n      finalAssessment: object.finalAssessment,\n      createdAt: new Date().toISOString(),\n    };\n\n    let feedbackRef;\n\n    if (feedbackId) {\n      feedbackRef = db.collection(\"feedback\").doc(feedbackId);\n    } else {\n      feedbackRef = db.collection(\"feedback\").doc();\n    }\n\n    await feedbackRef.set(feedback);\n\n    return { success: true, feedbackId: feedbackRef.id };\n  } catch (error) {\n    console.error(\"Error saving feedback:\", error);\n    return { success: false };\n  }\n}\n\nexport async function getInterviewById(id: string): Promise<Interview | null> {\n  const interview = await db.collection(\"interviews\").doc(id).get();\n\n  return interview.data() as Interview | null;\n}\n\nexport async function getFeedbackByInterviewId(\n  params: GetFeedbackByInterviewIdParams\n): Promise<Feedback | null> {\n  const { interviewId, userId } = params;\n\n  const querySnapshot = await db\n    .collection(\"feedback\")\n    .where(\"interviewId\", \"==\", interviewId)\n    .where(\"userId\", \"==\", userId)\n    .limit(1)\n    .get();\n\n  if (querySnapshot.empty) return null;\n\n  const feedbackDoc = querySnapshot.docs[0];\n  return { id: feedbackDoc.id, ...feedbackDoc.data() } as Feedback;\n}\n\nexport async function getLatestInterviews(\n  params: GetLatestInterviewsParams\n): Promise<Interview[] | null> {\n  const { userId, limit = 20 } = params;\n\n  const interviews = await db\n    .collection(\"interviews\")\n    .orderBy(\"createdAt\", \"desc\")\n    .where(\"finalized\", \"==\", true)\n    .where(\"userId\", \"!=\", userId)\n    .limit(limit)\n    .get();\n\n  return interviews.docs.map((doc) => ({\n    id: doc.id,\n    ...doc.data(),\n  })) as Interview[];\n}\n\nexport async function getInterviewsByUserId(\n  userId: string\n): Promise<Interview[] | null> {\n  const interviews = await db\n    .collection(\"interviews\")\n    .where(\"userId\", \"==\", userId)\n    .orderBy(\"createdAt\", \"desc\")\n    .get();\n\n  return interviews.docs.map((doc) => ({\n    id: doc.id,\n    ...doc.data(),\n  })) as Interview[];\n}\n"],"names":[],"mappings":";;;;;;IAQsB,iBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/components/Agent.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport Image from \"next/image\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { vapi } from \"@/lib/vapi.sdk\";\r\nimport { interviewer } from \"@/constants\";\r\nimport { createFeedback } from \"@/lib/actions/general.action\";\r\n\r\nenum CallStatus {\r\n  INACTIVE = \"INACTIVE\",\r\n  CONNECTING = \"CONNECTING\",\r\n  ACTIVE = \"ACTIVE\",\r\n  FINISHED = \"FINISHED\",\r\n}\r\n\r\ninterface SavedMessage {\r\n  role: \"user\" | \"system\" | \"assistant\";\r\n  content: string;\r\n}\r\n\r\nconst Agent = ({\r\n  userName,\r\n  userId,\r\n  interviewId,\r\n  feedbackId,\r\n  type,\r\n  questions,\r\n}: AgentProps) => {\r\n  const router = useRouter();\r\n  const [callStatus, setCallStatus] = useState<CallStatus>(CallStatus.INACTIVE);\r\n  const [messages, setMessages] = useState<SavedMessage[]>([]);\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n  const [lastMessage, setLastMessage] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    const onCallStart = () => {\r\n      setCallStatus(CallStatus.ACTIVE);\r\n    };\r\n\r\n    const onCallEnd = () => {\r\n      setCallStatus(CallStatus.FINISHED);\r\n    };\r\n\r\n    const onMessage = (message: Message) => {\r\n      if (message.type === \"transcript\" && message.transcriptType === \"final\") {\r\n        const newMessage = { role: message.role, content: message.transcript };\r\n        setMessages((prev) => [...prev, newMessage]);\r\n      }\r\n    };\r\n\r\n    const onSpeechStart = () => {\r\n      console.log(\"speech start\");\r\n      setIsSpeaking(true);\r\n    };\r\n\r\n    const onSpeechEnd = () => {\r\n      console.log(\"speech end\");\r\n      setIsSpeaking(false);\r\n    };\r\n\r\n    const onError = (error: Error) => {\r\n      console.log(\"Error:\", error);\r\n    };\r\n\r\n    vapi.on(\"call-start\", onCallStart);\r\n    vapi.on(\"call-end\", onCallEnd);\r\n    vapi.on(\"message\", onMessage);\r\n    vapi.on(\"speech-start\", onSpeechStart);\r\n    vapi.on(\"speech-end\", onSpeechEnd);\r\n    vapi.on(\"error\", onError);\r\n\r\n    return () => {\r\n      vapi.off(\"call-start\", onCallStart);\r\n      vapi.off(\"call-end\", onCallEnd);\r\n      vapi.off(\"message\", onMessage);\r\n      vapi.off(\"speech-start\", onSpeechStart);\r\n      vapi.off(\"speech-end\", onSpeechEnd);\r\n      vapi.off(\"error\", onError);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (messages.length > 0) {\r\n      setLastMessage(messages[messages.length - 1].content);\r\n    }\r\n\r\n    const handleGenerateFeedback = async (messages: SavedMessage[]) => {\r\n      console.log(\"handleGenerateFeedback\");\r\n\r\n      const { success, feedbackId: id } = await createFeedback({\r\n        interviewId: interviewId!,\r\n        userId: userId!,\r\n        transcript: messages,\r\n        feedbackId,\r\n      });\r\n\r\n      if (success && id) {\r\n        router.push(`/interview/${interviewId}/feedback`);\r\n      } else {\r\n        console.log(\"Error saving feedback\");\r\n        router.push(\"/\");\r\n      }\r\n    };\r\n\r\n    if (callStatus === CallStatus.FINISHED) {\r\n      if (type === \"generate\") {\r\n        router.push(\"/\");\r\n      } else {\r\n        handleGenerateFeedback(messages);\r\n      }\r\n    }\r\n  }, [messages, callStatus, feedbackId, interviewId, router, type, userId]);\r\n\r\n  const handleCall = async () => {\r\n    setCallStatus(CallStatus.CONNECTING);\r\n\r\n    if (type === \"generate\") {\r\n      await vapi.start(process.env.NEXT_PUBLIC_VAPI_WORKFLOW_ID!, {\r\n        variableValues: {\r\n          username: userName,\r\n          userid: userId,\r\n        },\r\n      });\r\n    } else {\r\n      let formattedQuestions = \"\";\r\n      if (questions) {\r\n        formattedQuestions = questions\r\n          .map((question) => `- ${question}`)\r\n          .join(\"\\n\");\r\n      }\r\n\r\n      await vapi.start(interviewer, {\r\n        variableValues: {\r\n          questions: formattedQuestions,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDisconnect = () => {\r\n    setCallStatus(CallStatus.FINISHED);\r\n    vapi.stop();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"call-view\">\r\n        {/* AI Interviewer Card */}\r\n        <div className=\"card-interviewer\">\r\n          <div className=\"avatar\">\r\n            <Image\r\n              src=\"/ai-avatar.png\"\r\n              alt=\"profile-image\"\r\n              width={65}\r\n              height={54}\r\n              className=\"object-cover\"\r\n            />\r\n            {isSpeaking && <span className=\"animate-speak\" />}\r\n          </div>\r\n          <h3>AI Interviewer</h3>\r\n        </div>\r\n\r\n        {/* User Profile Card */}\r\n        <div className=\"card-border\">\r\n          <div className=\"card-content\">\r\n            <Image\r\n              src=\"/user-avatar.png\"\r\n              alt=\"profile-image\"\r\n              width={539}\r\n              height={539}\r\n              className=\"rounded-full object-cover size-[120px]\"\r\n            />\r\n            <h3>{userName}</h3>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {messages.length > 0 && (\r\n        <div className=\"transcript-border\">\r\n          <div className=\"transcript\">\r\n            <p\r\n              key={lastMessage}\r\n              className={cn(\r\n                \"transition-opacity duration-500 opacity-0\",\r\n                \"animate-fadeIn opacity-100\"\r\n              )}\r\n            >\r\n              {lastMessage}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"w-full flex justify-center\">\r\n        {callStatus !== \"ACTIVE\" ? (\r\n          <button className=\"relative btn-call\" onClick={() => handleCall()}>\r\n            <span\r\n              className={cn(\r\n                \"absolute animate-ping rounded-full opacity-75\",\r\n                callStatus !== \"CONNECTING\" && \"hidden\"\r\n              )}\r\n            />\r\n\r\n            <span className=\"relative\">\r\n              {callStatus === \"INACTIVE\" || callStatus === \"FINISHED\"\r\n                ? \"Call\"\r\n                : \". . .\"}\r\n            </span>\r\n          </button>\r\n        ) : (\r\n          <button className=\"btn-disconnect\" onClick={() => handleDisconnect()}>\r\n            End\r\n          </button>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Agent;\r\n"],"names":[],"mappings":"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","debugId":null}}]
}