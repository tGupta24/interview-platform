{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/.next-internal/server/app/%28root%29/allinterviews/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {signOut as '00793394b277d19552014378f1dc846c09cbfb2b57'} from 'ACTIONS_MODULE0'\nexport {isAuthenticated as '00a01d09c19859b55ae7ac996eee01b56c67a3c0a2'} from 'ACTIONS_MODULE0'\nexport {logout as '00b931587180d522de8c7c728e98901163fe528047'} from 'ACTIONS_MODULE0'\nexport {getCurrentUser as '00d5d013267b10086c3f61e76203aad2abc9e1bfaa'} from 'ACTIONS_MODULE0'\nexport {signIn as '4016cb4fb2494378f5ff0a0e5882c62c19a902d083'} from 'ACTIONS_MODULE0'\nexport {setSessionCookie as '4085e29fdf6b5b5276675b3979afc28fc980338cfb'} from 'ACTIONS_MODULE0'\nexport {signUp as '40da36582b074e7ac0a194925866a6a4ceb629df82'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Desktop/Hackhazards%20AI/interview-platform/app/%28root%29/allinterviews/page.tsx"],"sourcesContent":["// // app/(root)/allinterviews/page.tsx\r\n\r\n// import { useEffect, useState } from \"react\";\r\n// import { db } from \"@/firebase/client\";\r\n// import { collection, getDocs } from \"firebase/firestore\";\r\n// import InterviewCard from \"@/components/InterviewCard\";\r\n// import { InterviewFilter } from \"@/components/InterviewFilter\"; \r\n\r\n// interface InterviewData {\r\n//   id: string;\r\n//   role: string;\r\n//   type: string;\r\n//   level: string;\r\n//   techstack: string[];\r\n//   coverImage: string;\r\n// }\r\n\r\n// const AllInterviews = () => {\r\n//   const [interviews, setInterviews] = useState<InterviewData[]>([]);\r\n//   const [filter, setFilter] = useState(\"All\");\r\n//   const [uniqueTypes, setUniqueTypes] = useState<string[]>([]);\r\n//   const [uniqueTechStacks, setUniqueTechStacks] = useState<string[]>([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchInterviews = async () => {\r\n//       const snapshot = await getDocs(collection(db, \"interviews\"));\r\n//       const data = snapshot.docs.map((doc) => ({\r\n//         id: doc.id,\r\n//         ...doc.data(),\r\n//       })) as InterviewData[];\r\n\r\n//       setInterviews(data);\r\n//       // Extract unique filter options\r\n//       const types = [...new Set(data.map((i) => i.type))];\r\n//       const techStacks = [\r\n//         ...new Set(data.flatMap((i) => i.techstack)),\r\n//       ];\r\n\r\n//       setUniqueTypes([\"All\", ...types]);\r\n//       setUniqueTechStacks([\"All\", ...techStacks]);\r\n//     };\r\n\r\n//     fetchInterviews();\r\n//   }, []);\r\n\r\n//   // Filter interviews by type and tech stack\r\n//   const filteredInterviews = interviews.filter((interview) => {\r\n//     const typeMatch = filter === \"All\" || interview.type === filter;\r\n//     const techStackMatch = filter === \"All\" || interview.techstack.includes(filter);\r\n//     return typeMatch && techStackMatch;\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"max-w-6xl mx-auto px-4\">\r\n//       <h1 className=\"text-3xl font-bold text-center mb-6\">All Interviews</h1>\r\n\r\n//       {/* Filters */}\r\n//       <InterviewFilter\r\n//         selected={filter}\r\n//         onChange={setFilter}\r\n//         options={{ types: uniqueTypes, techStacks: uniqueTechStacks }}\r\n//       />\r\n\r\n//       <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n//         {filteredInterviews.map((interview) => (\r\n//           <InterviewCard key={interview.id} {...interview} />\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AllInterviews;\r\n"],"names":[],"mappings":"AAAA,uCAAuC;AAEvC,+CAA+C;AAC/C,0CAA0C;AAC1C,4DAA4D;AAC5D,0DAA0D;AAC1D,mEAAmE;AAEnE,4BAA4B;AAC5B,gBAAgB;AAChB,kBAAkB;AAClB,kBAAkB;AAClB,mBAAmB;AACnB,yBAAyB;AACzB,wBAAwB;AACxB,IAAI;AAEJ,gCAAgC;AAChC,uEAAuE;AACvE,iDAAiD;AACjD,kEAAkE;AAClE,4EAA4E;AAE5E,sBAAsB;AACtB,4CAA4C;AAC5C,sEAAsE;AACtE,mDAAmD;AACnD,sBAAsB;AACtB,yBAAyB;AACzB,gCAAgC;AAEhC,6BAA6B;AAC7B,yCAAyC;AACzC,6DAA6D;AAC7D,6BAA6B;AAC7B,wDAAwD;AACxD,WAAW;AAEX,2CAA2C;AAC3C,qDAAqD;AACrD,SAAS;AAET,yBAAyB;AACzB,YAAY;AAEZ,gDAAgD;AAChD,kEAAkE;AAClE,uEAAuE;AACvE,uFAAuF;AACvF,0CAA0C;AAC1C,QAAQ;AAER,aAAa;AACb,+CAA+C;AAC/C,gFAAgF;AAEhF,wBAAwB;AACxB,yBAAyB;AACzB,4BAA4B;AAC5B,+BAA+B;AAC/B,yEAAyE;AACzE,WAAW;AAEX,+EAA+E;AAC/E,mDAAmD;AACnD,gEAAgE;AAChE,cAAc;AACd,eAAe;AACf,aAAa;AACb,OAAO;AACP,KAAK;AAEL,gCAAgC","debugId":null}}]
}